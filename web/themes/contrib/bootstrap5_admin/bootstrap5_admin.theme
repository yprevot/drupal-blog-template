<?php

/**
 * @file
 * Bootstrap 5 theme file.
 */

/**
 * Cspell:ignore bootswatch selectpicker vcard webm msvideo abiword .*/

use Drupal\block\Entity\Block;
use Drupal\bootstrap5_admin\SettingsManager;
use Drupal\bootstrap5_admin\SubthemeManager;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Markup;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\views_ui\ViewUI;

/**
 * Implements hook_preprocess_HOOK() for menu-local-tasks templates.
 *
 * Use preprocess hook to set #attached to child elements
 * because they will be processed by Twig and drupal_render will
 * be invoked.
 */
function bootstrap5_admin_preprocess_menu_local_tasks(&$variables) {
  if (!empty($variables['primary'])) {
    $variables['primary']['#attached'] = [
      'library' => [
        'bootstrap5_admin/drupal.nav-tabs',
      ],
    ];
  }
  elseif (!empty($variables['secondary'])) {
    $variables['secondary']['#attached'] = [
      'library' => [
        'bootstrap5_admin/drupal.nav-tabs',
      ],
    ];
  }

  foreach (Element::children($variables['primary']) as $key) {
    $variables['primary'][$key]['#level'] = 'primary';
  }
  foreach (Element::children($variables['secondary']) as $key) {
    $variables['secondary'][$key]['#level'] = 'secondary';
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action templates.
 */
function bootstrap5_admin_preprocess_menu_local_action(array &$variables) {
  if (!empty($variables['link'])) {
    $variables['link']['#options']['attributes']['class'][] = 'nav-link';
    $variables['link']['#options']['attributes']['class'][] = 'btn btn-info';
    if (!empty($variables["link"]["#options"]["set_active_class"])) {
      $variables['link']['#options']['attributes']['class'][] = 'active';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task templates.
 */
function bootstrap5_admin_preprocess_menu_local_task(&$variables) {
  // Ensure is-active class is set when the tab is active. The generic active
  // link handler applies stricter comparison rules than what is necessary for
  // tabs.
  if (isset($variables['is_active']) && $variables['is_active'] === TRUE) {
    $variables['link']['#options']['attributes']['class'][] = 'active is-active nav-link disabled';
  }
  else {
    $variables['link']['#options']['attributes']['class'][] = 'nav-link';
  }

  if (isset($variables['element']['#level'])) {
    $variables['level'] = $variables['element']['#level'];
  }
  $routeName = $variables['link']['#url']->getRouteName();
  bootstrap5_admin_add_icon_link($routeName, $variables);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bootstrap5_admin_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  $settings_manager = new SettingsManager(\Drupal::service('theme.manager'));
  return $settings_manager->themeSettingsAlter($form, $form_state, $form_id);
}

/**
 * Submit validate subtheme callback.
 */
function bootstrap_form_system_theme_settings_subtheme_validate(array &$form, FormStateInterface $form_state) {
  $subtheme_manager = new SubthemeManager(\Drupal::service('file_system'), \Drupal::service('messenger'), \Drupal::service('extension.list.theme'));
  return $subtheme_manager->validateForm($form, $form_state);
}

/**
 * Submit create subtheme callback.
 */
function bootstrap_form_system_theme_settings_subtheme_submit(array &$form, FormStateInterface $form_state) {
  $subtheme_manager = new SubthemeManager(\Drupal::service('file_system'), \Drupal::service('messenger'), \Drupal::service('extension.list.theme'));
  return $subtheme_manager->submitForm($form, $form_state);
}

/**
 * Implements theme_preprocess_page().
 */
function bootstrap5_admin_preprocess_page(&$variables) {
  // Pass variables to theme.
  $variables['b5_top_container'] = theme_get_setting('b5_top_container');
  // Navbar colour theme.
  $variables['b5_navbar_schema'] = theme_get_setting('b5_navbar_schema');
  $variables['b5_navbar_bg_schema'] = theme_get_setting('b5_navbar_bg_schema');
  // Footer colour theme.
  $variables['b5_footer_schema'] = theme_get_setting('b5_footer_schema');
  $variables['b5_footer_bg_schema'] = theme_get_setting('b5_footer_bg_schema');

  $variables['b5_bootswatch_theme'] = theme_get_setting('b5_bootswatch_theme');
  if (!empty($variables['b5_bootswatch_theme'])) {
    $variables['#attached']['library'][] = 'bootstrap5_admin/bootswatch.' . $variables['b5_bootswatch_theme'];
  }
}

/**
 * Implements template_preprocess_select().
 */
function bootstrap5_admin_preprocess_select(&$variables) {
  if (!empty(theme_get_setting('b5_bootstrap_select'))) {
    if (!empty($variables['attributes']['class'])) {
      $variables['attributes']['class'] = array_diff($variables['attributes']['class'], ["form-select"]);
    }
    $variables['attributes']['class'][] = 'selectpicker';
    $variables['#attached']['library'][] = 'bootstrap5_admin/bootstrap-select';
  }
  else {
    $variables['attributes']['class'][] = 'w-auto';
  }
}

/**
 * Implements hook_preprocess_HOOK() for views_exposed_form.
 */
function bootstrap5_admin_preprocess_views_exposed_form(&$variables) {
  $form = &$variables['form'];

  // Add BEM classes for items in the form.
  // Sorted keys.
  $child_keys = Element::children($form, TRUE);
  $last_key = NULL;
  $child_before_actions_key = NULL;

  foreach ($child_keys as $child_key) {
    if (!empty($form[$child_key]['#type'])) {
      if ($form[$child_key]['#type'] === 'actions') {
        // We need the key of the element that precedes the actions' element.
        $child_before_actions_key = $last_key;
        $form[$child_key]['#attributes']['class'][] = 'col-auto';
        if (!empty($form[$child_key]["submit"])) {
          $form[$child_key]["submit"]["#attributes"]['class'][] = 'mt-4';
        }
        if (!empty($form[$child_key]["reset"])) {
          $form[$child_key]["reset"]["#attributes"]['class'][] = 'mt-4';
        }
      }
      if (!in_array($form[$child_key]['#type'], ['hidden', 'actions'])) {
        $form[$child_key]['#wrapper_attributes']['class'][] = 'col-auto';
        $last_key = $child_key;
      }
    }
  }

  if ($child_before_actions_key) {
    // Add a modifier class to the item that precedes the form actions.
    $form[$child_before_actions_key]['#wrapper_attributes']['class'][] = 'views-exposed-form__item--preceding-actions';
  }
}

/**
 * Callback to convert attributes class which is string to array.
 *
 * @param array $variables
 *   The variables to render from preprocess function.
 */
function _bootstrap5_admin_attributes_class_string_to_array(array &$variables) {
  if (!empty($variables['attributes']['class']) && is_string($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [$variables['attributes']['class']];
  }
}

/**
 * Implements theme_preprocess_textarea().
 */
function bootstrap5_admin_preprocess_textarea(&$variables) {
  _bootstrap5_admin_attributes_class_string_to_array($variables);
  $variables['attributes']['class'][] = 'form-control';
}

/**
 * Implements template_preprocess_HOOK() for input.
 */
function bootstrap5_admin_preprocess_input(&$variables) {
  _bootstrap5_admin_attributes_class_string_to_array($variables);
  $type_html = $variables['attributes']['type'];
  $text_types_html = [
    'text',
    'email',
    'tel',
    'number',
    'search',
    'password',
    'url',
    'month',
    'week',
    'date',
    'time',
  ];

  if (in_array($type_html, $text_types_html)) {
    $variables['attributes']['class'][] = 'form-control';
  }

  if (in_array($type_html, ['checkbox', 'radio'])) {
    $variables['attributes']['class'][] = 'form-check-input';
    $variables['attributes']['role'] = 'switch';
  }
  // Skip icon if views ajax.
  if (!empty($variables["element"]["#submit"]) && !empty($variables["element"]["#submit"][0])) {
    if ($variables["element"]["#submit"][0][0] instanceof ViewUI) {
      return FALSE;
    }
  }
  if (!empty($variables["element"]["#process"]) && $variables["element"]["#process"][0] == 'views_ui_form_button_was_clicked') {
    return FALSE;
  }
  // Change submit input to button submit.
  $request = \Drupal::request();
  $is_ajax = $request->isXmlHttpRequest();
  if (!$is_ajax && $type_html == 'submit' && !empty($value = $variables["attributes"]["value"])) {
    if ($value instanceof TranslatableMarkup) {
      $value = $variables["attributes"]["value"]->getUntranslatedString();
    }
    $extractValue = explode(' ', strtolower($value));

    $value = trim(current($extractValue));
    $icons = [
      'add' => 'plus',
      'advanced' => 'badge-ad',
      'apply' => 'check-square',
      'confirm' => 'check',
      'continue' => 'play-fill',
      'configure' => 'gear',
      'cancel' => 'arrow-counterclockwise',
      'create' => 'plus-square',
      'clear' => 'eraser',
      'change' => 'arrow-left-right',
      'delete' => 'trash',
      'download' => 'download',
      'disable' => 'slash-circle',
      'duplicate' => 'files',
      'export' => 'file-earmark-spreadsheet',
      'expose' => 'ui-checks',
      'enter' => 'box-arrow-in-right',
      'filter' => 'funnel',
      'grouped' => 'collection',
      'hide' => 'eye-slash',
      'key' => 'key',
      'log' => 'door-open-fill',
      'next' => 'arrow-right',
      'install' => 'sliders',
      'import' => 'database-down',
      'remove' => 'trash3',
      'run' => 'play-btn',
      're-index' => 'sort-alpha-down',
      'index' => 'sort-alpha-up',
      'save' => 'save',
      'send' => 'send',
      'reset' => 'repeat',
      'stop' => 'sign-stop',
      'search' => 'search',
      'update' => 'box-arrow-in-up',
      'upload' => 'upload',
      'view' => 'eye',
      'preview' => 'skip-forward',
      'previous' => 'arrow-left',
      'single' => 'signpost',
      'submit' => 'card-checklist',
      'switch' => 'joystick',
      'test' => 'robot',
      'uninstall' => 'folder-minus',
      'dashboard' => 'speedometer',
      'feed' => 'rss',
      'task' => 'list-task',
      'field' => 'input-cursor-text',
      'share' => 'share',
      'register' => 'person-vcard',
      'detection' => 'radar',
    ];
    if (!empty($icons[$value])) {
      $variables["element"]["#attributes"]['class'][] = 'icon-link icon-link-hover';
      $variables['icon'] = [
        '#type' => 'html_tag',
        '#tag' => 'i',
        '#value' => '',
        '#attributes' => [
          'class' => ['bi', 'bi-' . $icons[$value]],
        ],
      ];
    }

  }
}

/**
 * Implements theme_preprocess_datetime_form().
 */
function bootstrap5_admin_preprocess_datetime_form(&$variables) {
  _bootstrap5_admin_attributes_class_string_to_array($variables);
  $variables['attributes']['class'][] = 'form-inline';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bootstrap5_admin_preprocess_image(&$variables) {
  _bootstrap5_admin_attributes_class_string_to_array($variables);
  $variables['attributes']['class'][] = 'img-fluid';
}

/**
 * Implements theme_preprocess_html().
 */
function bootstrap5_admin_preprocess_html(&$variables) {
  // Body colour theme.
  $b5_body_schema = theme_get_setting('b5_body_schema');
  $variables['b5_body_schema'] = $b5_body_schema == 'light' ? 'text-dark' : ($b5_body_schema == 'dark' ? 'text-light' : '');
  $b5_body_bg_schema = theme_get_setting('b5_body_bg_schema');
  $variables['b5_body_bg_schema'] = $b5_body_bg_schema != 'none' ? 'bg-' . $b5_body_bg_schema : '';
}

/**
 * Implements hook_form_alter().
 */
function bootstrap5_admin_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $build_info = $form_state->getBuildInfo();
  // Make entity forms delete link use the action-link component.
  $request = \Drupal::request();
  $is_ajax = $request->isXmlHttpRequest();
  if (!$is_ajax && isset($form['actions']['delete']['#type']) && $form['actions']['delete']['#type'] === 'link' && !empty($build_info['callback_object']) && $build_info['callback_object'] instanceof EntityForm) {
    $form['actions']['delete'] = _bootstrap5_convert_link_to_action_link($form['actions']['delete'], 'trash', 'default', 'danger');
  }
  if (!$is_ajax && isset($form['actions']['cancel']['#type']) && $form['actions']['cancel']['#type'] === 'link' && !empty($build_info['callback_object'])) {
    $form['actions']['cancel'] = _bootstrap5_convert_link_to_action_link($form['actions']['cancel'], 'arrow-counterclockwise', 'default', 'danger');
  }

  switch ($form_id) {
    case 'field_ui_field_storage_add_form':
      $form["add"]["new_storage_type"]['#wrapper_attributes']['class'][] = 'col-auto';
      $form["add"]["separator"]['#wrapper_attributes']['class'][] = 'col-auto';
      $form["add"]["existing_storage_name"]['#wrapper_attributes']['class'][] = 'col-auto';
      break;
  }
}

/**
 * Add icon to link.
 */
function bootstrap5_admin_add_icon_link($routName, &$links_item) {
  if (empty($links_item['link'])) {
    return $links_item;
  }
  $extract = explode('_', str_replace(['-', '.'], '_', $routName));
  $iconConvert = [
    'settings setting configure' => ['gear', 'sm', 'warning'],
    'cancel remove disable delete uninstall' => ['folder-minus', 'sm', 'danger'],
    'update upgrade' => ['forward', 'sm', 'info'],
    'set' => ['check-all', 'sm', 'outline-success'],
    'install' => ['check', 'sm', 'outline-success'],
    'edit' => ['pencil-square', 'sm', 'outline-warning'],
    'manage' => ['list-columns', 'sm', 'outline-warning'],
    'list' => ['list', 'sm', 'outline-warning'],
    'storage' => ['database', 'sm', 'outline-warning'],
    'add' => ['plus', 'sm', 'outline-warning'],
    'files' => ['files', 'sm', 'outline-warning'],
    'enable view canonical' => ['eye', 'sm', 'outline-warning'],
    'duplicate' => ['window-stack', 'sm', 'outline-warning'],
    'rearrange reorder' => ['sort-down', 'sm', 'outline-warning'],
    'analyze' => ['graph-up-arrow', 'sm', 'outline-warning'],
    'flush' => ['eraser', 'sm', 'outline-warning'],
    'sync' => ['arrow-left-right', 'sm', 'outline-warning'],
    'import sources' => ['database-down', 'sm', 'outline-warning'],
    'export' => ['database-up', 'sm', 'outline-warning'],
    'single' => ['inbox', 'sm', 'outline-warning'],
    'full' => ['inboxes-fill', 'sm', 'outline-warning'],
    'role' => ['person-gear', 'sm', 'outline-warning'],
    'collection' => ['collection', 'sm', 'outline-warning'],
    'permissions' => ['person-lock', 'sm', 'outline-warning'],
    'ui' => ['ui-checks', 'sm', 'outline-warning'],
    'form' => ['ui-checks-grid', 'sm', 'outline-warning'],
    'content' => ['body-text', 'sm', 'outline-warning'],
    'comment' => ['chat-quote', 'sm', 'outline-warning'],
    'history' => ['clock-history', 'sm', 'outline-warning'],
    'display' => ['display', 'sm', 'outline-warning'],
    'theme' => ['layout-text-window-reverse', 'sm', 'outline-warning'],
    'diff' => ['plus-slash-minus', 'sm', 'outline-warning'],
    'assignment' => ['plus-slash-minus', 'sm', 'outline-warning'],
    'dashboard' => ['speedometer', 'sm', 'outline-warning'],
    'feed feeds' => ['rss', 'sm', 'outline-warning'],
    'task' => ['list-task', 'sm', 'outline-warning'],
    'index' => ['sort-alpha-down', 'sm', 'outline-warning'],
    'fields field' => ['input-cursor-text', 'sm', 'outline-warning'],
    'mapping share' => ['share', 'sm', 'outline-warning'],
    'register login' => ['person-vcard', 'sm', 'outline-warning'],
    'client customer' => ['link-45deg', 'sm', 'outline-warning'],
    'detection' => ['radar', 'sm', 'outline-warning'],
  ];
  foreach ($iconConvert as $search => $attributes) {
    if (!empty(array_intersect(explode(' ', $search), $extract))) {
      [$icon_name, $size, $variant] = $attributes;
      $links_item['link'] = _bootstrap5_convert_link_to_action_link($links_item['link'], $icon_name, $size, $variant);
      break;
    }
  }
  return $links_item;
}

/**
 * Implements hook_preprocess_HOOK() for links.
 */
function bootstrap5_admin_preprocess_links(&$variables) {
  foreach ($variables['links'] as $linkName => &$links_item) {
    if (!empty($links_item['link']) && !empty($links_item['link']['#url']) && $links_item['link']['#url'] instanceof Url) {
      if ($links_item['link']['#url']->isRouted()) {
        $routName = $links_item['link']['#url']->getRouteName() . '-' . $linkName;
        bootstrap5_admin_add_icon_link($routName, $links_item);
      }
    }
  }

  // This makes it so array keys of #links items are added as a class. This
  // functionality was removed in Drupal 8.1, but still necessary in some
  // instances.
  // @todo remove in https://drupal.org/node/3120962
  if (!empty($variables['links'])) {
    foreach ($variables['links'] as $key => $value) {
      if (!is_numeric($key)) {
        $class = Html::getClass($key);
        $variables['links'][$key]['attributes']->addClass($class);
      }
    }
  }
}

/**
 * Converts a link render element to an action link.
 *
 * This helper merges every attribute from $link['#attributes'], from
 * $link['#options']['attributes'] and from the Url object's.
 *
 * @param array $link
 *   Link renderable array.
 * @param string|null $icon_name
 *   The name of the needed icon. When specified, a CSS class will be added with
 *   the following pattern: 'action-link--icon-[icon_name]'. If the needed icon
 *   is not implemented in CSS, no icon will be added.
 *   Currently available icons are:
 *    - checkmark,
 *    - cog,
 *    - ex,
 *    - plus,
 *    - trash.
 * @param string $size
 *   Name of the small action link variant. Defaults to 'default'.
 *   Supported sizes are:
 *    - default,
 *    - small,
 *    - extrasmall.
 * @param string $variant
 *   Variant of the action link. Supported variants are 'default' and 'danger'.
 *   Defaults to 'default'.
 *
 * @return array
 *   The link renderable converted to action link.
 */
function _bootstrap5_convert_link_to_action_link(array $link, $icon_name = NULL, $size = 'default', $variant = 'default') {
  // Early opt-out if we cannot do anything.
  if (empty($link['#type']) || $link['#type'] !== 'link' || empty($link['#url'])) {
    return $link;
  }

  // \Drupal\Core\Render\Element\Link::preRenderLink adds $link['#attributes']
  // to $link[#options]['attributes'] if it is not empty, but it does not merges
  // the 'class' subkey deeply.
  // Because of this, when $link[#options]['attributes']['class'] is set, the
  // classes defined in $link['#attributes']['class'] are ignored.
  //
  // To keep this behavior we repeat this for action-link, which means that this
  // conversion happens a bit earlier. We unset $link['#attributes'] to prevent
  // Link::preRenderLink() doing the same, because for action-links, that would
  // be needless.
  $link += ['#options' => []];
  if (isset($link['#attributes'])) {
    $link['#options'] += [
      'attributes' => [],
    ];
    $link['#options']['attributes'] += $link['#attributes'];
    unset($link['#attributes']);
  }
  $link['#options'] += ['attributes' => []];
  $link['#options']['attributes'] += ['class' => []];

  // Determine the needed (type) variant.
  $variants_supported = [
    'default',
    'danger',
    'warning',
    'success',
    'info',
    'light',
    'dark',
    'link',
    'primary',
    'secondary',
  ];
  $variant = is_string($variant) && in_array($variant, $variants_supported) ? $variant : reset($variants_supported);

  // Remove button, button modifier CSS classes and other unwanted ones.
  $link['#options']['attributes']['class'] = array_diff($link['#options']['attributes']['class'], [
    'button',
    'button--action',
    'button--primary',
    'button--danger',
    'button--small',
    'button--extrasmall',
    'link',
  ]);

  // Add the variant-modifier CSS class only if the variant is not the default.
  if (in_array($variant, $variants_supported) && $variant != reset($variants_supported)) {
    $link['#options']['attributes']['class'][] = 'btn';
    $link['#options']['attributes']['class'][] = "btn-$variant";
  }

  // Add the icon modifier CSS class.
  if (!empty($icon_name) && !is_array($link['#title'])) {
    $title = "<i class='bi bi-$icon_name'></i> " . (string) $link['#title'];
    $link['#title'] = Markup::create($title);
    $link['#options']['attributes']['class'][] = 'icon-link icon-link-hover';
  }

  if ($size && in_array($size, ['lg', 'sm'])) {
    $link['#options']['attributes']['class'][] = "btn-$size";
  }

  // If the provided $link is an item of the 'links' theme function, then only
  // the attributes of the Url object are processed during rendering.
  $url_attributes = $link['#url']->getOption('attributes') ?: [];
  $url_attributes = NestedArray::mergeDeep($url_attributes, $link['#options']['attributes']);
  $link['#url']->setOption('attributes', $url_attributes);

  return $link;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bootstrap5_admin_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id']) && $block = Block::load($variables['elements']['#id'])) {
    $region = $block->getRegion();
    if (!empty($region)) {
      $variables['content']['#attributes']['data-block']['region'] = $region;
    }
  }
}

/**
 * {@inheritdoc}
 */
function bootstrap5_admin_preprocess_file_link(&$variables) {
  $mime_type = $variables['file']->getMimeType();
  $mime_type = explode('/', str_replace(['.', '-', '+'], '/', $mime_type));
  $type = end($mime_type);
  $type = str_replace(
    [
      'jpeg', 'webp', 'jar', '3gpp', '3g2', 'sheet', 'excel', 'woff2', 'webm',
      'presentation', 'powerpoint', 'text', 'midi', 'javascript', 'document',
      'msword', 'msvideo', 'mpeg', 'abiword',
    ],
    [
      'jpg', 'jpg', 'java', 'mov', 'move', 'xlsx', 'xls', 'woff', 'mov',
      'pptx', 'ptt', 'txt', 'md', 'js', 'docx', 'doc', 'mov', 'mov', 'doc',
    ],
    $type
  );
  // Zip file.
  $type = str_replace([
    'zip', '7z', 'tar', 'rar', 'bzip', 'bzip2', 'compressed', 'archive', 'stream',
  ], [$type . ' bi-file-zip'], $type);

  $variables['icon'] = Markup::create('<i class="bi bi-file-earmark bi-filetype-' . $type . '"></i>');
}
